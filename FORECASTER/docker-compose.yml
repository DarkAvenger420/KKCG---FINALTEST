version: '3.8'

services:
  # PostgreSQL Database with TimescaleDB
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: restaurant_postgres
    environment:
      POSTGRES_DB: restaurant_forecasting
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - restaurant_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching and Task Queue
  redis:
    image: redis:7-alpine
    container_name: restaurant_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - restaurant_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI Backend
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: restaurant_backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/restaurant_forecasting
      - REDIS_URL=redis://redis:6379
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./data:/app/data
      - ./ml_pipeline:/app/ml_pipeline
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - restaurant_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: restaurant_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    depends_on:
      - backend
    networks:
      - restaurant_network

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: restaurant_celery_worker
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/restaurant_forecasting
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - ./data:/app/data
      - ./ml_pipeline:/app/ml_pipeline
    depends_on:
      - postgres
      - redis
    networks:
      - restaurant_network
    command: celery -A app.core.celery_app worker --loglevel=info

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: restaurant_celery_beat
    environment:
      - DATABASE_URL=postgresql://postgres:postgres123@postgres:5432/restaurant_forecasting
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./backend:/app
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - restaurant_network
    command: celery -A app.core.celery_app beat --loglevel=info

  # MLflow for Experiment Tracking
  mlflow:
    image: python:3.9-slim
    container_name: restaurant_mlflow
    ports:
      - "5000:5000"
    volumes:
      - ./data/mlflow:/mlflow
      - ./backend/requirements.txt:/requirements.txt
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://postgres:postgres123@postgres:5432/restaurant_forecasting
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    depends_on:
      - postgres
    networks:
      - restaurant_network
    command: >
      bash -c "
        pip install mlflow psycopg2-binary &&
        mlflow server 
          --backend-store-uri postgresql://postgres:postgres123@postgres:5432/restaurant_forecasting
          --default-artifact-root /mlflow/artifacts
          --host 0.0.0.0
          --port 5000
      "

  # Apache Airflow (Webserver)
  airflow-webserver:
    image: apache/airflow:2.7.1-python3.9
    container_name: restaurant_airflow_webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres123@postgres:5432/restaurant_forecasting
      - AIRFLOW__WEBSERVER__SECRET_KEY=airflow_secret_key
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    ports:
      - "8080:8080"
    volumes:
      - ./ml_pipeline/airflow_dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
    depends_on:
      - postgres
    networks:
      - restaurant_network
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com &&
        airflow webserver --port 8080
      "

  # Apache Airflow (Scheduler)
  airflow-scheduler:
    image: apache/airflow:2.7.1-python3.9
    container_name: restaurant_airflow_scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://postgres:postgres123@postgres:5432/restaurant_forecasting
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    volumes:
      - ./ml_pipeline/airflow_dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
    depends_on:
      - postgres
    networks:
      - restaurant_network
    command: airflow scheduler

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: restaurant_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - restaurant_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: restaurant_grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - restaurant_network
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  restaurant_network:
    driver: bridge 